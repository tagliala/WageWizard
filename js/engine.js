// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var BASE_SALARY, PR_ENUM_ROLE, SKILL_VALIDATION, VERSION, WEEKS, WageWizard, applySecondaryDiscounts, getKeeperComponents, getPlayerBonus, getRate, getSalaryComponents, getSetPiecesMultipliers, setData, setKeeperSkill, setMinAndMaxSalary, setPlayerData, setPlayerSkills, setPrimarySkill, setSetPiecesSkill, validateSkill;

  window.WageWizard = window.WageWizard || {};

  WageWizard = window.WageWizard;

  WageWizard.Engine = WageWizard.Engine || {};

  VERSION = 1;

  WEEKS = 16;

  BASE_SALARY = 2500;

  SKILL_VALIDATION = {
    form: {
      min: 1,
      max: 8
    },
    stamina: {
      min: 1,
      max: 9
    },
    exp: {
      min: 0,
      max: 30
    },
    skill: {
      min: 0,
      max: 22
    },
    loyalty: {
      min: 1,
      max: 20
    }
  };

  PR_ENUM_ROLE = {
    0: "GK",
    1: "CD",
    2: "CD OFF",
    3: "CD TW",
    4: "WB",
    5: "WB OFF",
    6: "WB DEF",
    7: "WB TM",
    8: "IM",
    9: "IM OFF",
    10: "IM DEF",
    11: "IM TW",
    12: "WI",
    13: "WI OFF",
    14: "WI DEF",
    15: "WI TM",
    16: "FW",
    17: "FW DEF",
    18: "FW DEF+T",
    19: "FW TW"
  };

  validateSkill = function(skill, type) {
    var max, min, parsedSkill;
    if (SKILL_VALIDATION[type] == null) {
      return 0;
    }
    min = SKILL_VALIDATION[type].min;
    max = SKILL_VALIDATION[type].max;
    parsedSkill = Number(skill.toString().replace(/,/g, "."));
    if (isNaN(parsedSkill) || parsedSkill < min) {
      return min;
    } else if (parsedSkill > max) {
      return max;
    } else {
      return parsedSkill;
    }
  };

  getPlayerBonus = function(loyalty, motherClubBonus) {
    var playerBonus, tempHTML;
    if (motherClubBonus) {
      loyalty = 20;
    }
    playerBonus = 0;
    if (motherClubBonus) {
      playerBonus += 0.5;
    }
    playerBonus += Math.max(0, loyalty - 1) / 19;
    if (WageWizard.CONFIG.DEBUG) {
      tempHTML = "getPlayerBonus(loyalty = <b>" + loyalty + "</b>, motherClubBonus = <b>" + motherClubBonus + "</b>): <b>" + playerBonus + "</b><br/><br/>";
      $("#tabDebug").append(tempHTML);
    }
    return playerBonus;
  };

  getRate = function(age) {
    age = Math.min(parseInt(age, 10), 37);
    if (age >= 29) {
      return 1 - (age - 28) / 10;
    } else {
      return 1;
    }
  };

  getSetPiecesMultipliers = function(level) {
    return [1 + 0.0026 * Math.max(0, level - 1), 1 + 0.0026 * Math.max(0, level - 0.01)];
  };

  getKeeperComponents = function(level) {
    return [WageWizard.KEEPER_FORMULA[Math.max(0, level - 1)] * 10 - 2500, WageWizard.KEEPER_FORMULA[Math.max(0, level)] * 10 - 2500];
  };

  getSalaryComponents = function(skill, level) {
    var formula, salary_component_high, salary_component_low;
    formula = WageWizard.FORMULAE[skill];
    if (level < 1) {
      return [0, 0];
    }
    salary_component_low = formula.a * Math.pow(level - 1, formula.b);
    salary_component_high = formula.a * Math.pow(level - 0.01, formula.b);
    if (salary_component_low > 20000) {
      salary_component_low = 20000 + (salary_component_low - 20000) * formula.d;
    }
    if (salary_component_high > 20000) {
      salary_component_high = 20000 + (salary_component_high - 20000) * formula.d;
    }
    return [salary_component_low * 10, salary_component_high * 10];
  };

  setMinAndMaxSalary = function(player) {
    var base_salary, max, min, skill;
    min = 0;
    max = 0;
    for (skill in player.WageWizard.Skills) {
      min += player.WageWizard.Skills[skill].min;
      max += player.WageWizard.Skills[skill].max;
    }
    base_salary = player.Abroad ? 1.2 * BASE_SALARY : BASE_SALARY;
    player.WageWizard.min = base_salary + min * player.WageWizard.Skills['SetPiecesSkill'].min;
    player.WageWizard.max = base_salary + max * player.WageWizard.Skills['SetPiecesSkill'].max;
  };

  applySecondaryDiscounts = function(player) {
    var formula, primary, skill, _i, _len, _ref;
    primary = player.WageWizard.primary;
    _ref = WageWizard.HATTRICK_SKILLS;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      skill = _ref[_i];
      if (!(skill !== 'SetPiecesSkill' && skill !== primary)) {
        continue;
      }
      formula = WageWizard.FORMULAE[skill];
      player.WageWizard.Skills[skill].min *= WageWizard.DISCOUNT_RATE;
      player.WageWizard.Skills[skill].max *= WageWizard.DISCOUNT_RATE;
    }
  };

  setPrimarySkill = function(player) {
    var maximum_min, primary, skill, _i, _j, _len, _len1, _ref, _ref1;
    player.WageWizard.unpredictable_skills = [];
    maximum_min = -Infinity;
    primary = '';
    _ref = WageWizard.HATTRICK_SKILLS;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      skill = _ref[_i];
      if (skill !== 'SetPiecesSkill') {
        if (player.WageWizard.Skills[skill].min > maximum_min) {
          maximum_min = player.WageWizard.Skills[skill].min;
          primary = skill;
        }
      }
    }
    _ref1 = WageWizard.HATTRICK_SKILLS;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      skill = _ref1[_j];
      if (skill !== 'SetPiecesSkill' && skill !== primary) {
        if (player.WageWizard.Skills[skill].max >= maximum_min) {
          player.WageWizard.unpredictable_skills.push(skill);
        }
      }
    }
    if (player.WageWizard.unpredictable_skills.length !== 0) {
      player.WageWizard.unpredictable_skills.push(primary);
    }
    player.WageWizard.primary = primary;
  };

  setKeeperSkill = function(player) {
    var abroad_multiplier, keeperComponents;
    player.WageWizard.Skills['KeeperSkill'] = {};
    abroad_multiplier = player.Abroad ? 1.2 : 1;
    keeperComponents = getKeeperComponents(player.KeeperSkill);
    player.WageWizard.Skills['KeeperSkill'].min = keeperComponents[0] * player.WageWizard.rate * abroad_multiplier;
    player.WageWizard.Skills['KeeperSkill'].max = keeperComponents[1] * player.WageWizard.rate * abroad_multiplier;
  };

  setSetPiecesSkill = function(player) {
    var setPiecesMultipliers;
    player.WageWizard.Skills['SetPiecesSkill'] = {};
    setPiecesMultipliers = getSetPiecesMultipliers(player.SetPiecesSkill);
    player.WageWizard.Skills['SetPiecesSkill'].min = setPiecesMultipliers[0];
    player.WageWizard.Skills['SetPiecesSkill'].max = setPiecesMultipliers[1];
  };

  setPlayerSkills = function(player) {
    var abroad_multiplier, salaryComponents, skill;
    player.WageWizard.Skills = {};
    abroad_multiplier = player.Abroad ? 1.2 : 1;
    setKeeperSkill(player);
    setSetPiecesSkill(player);
    for (skill in WageWizard.FORMULAE) {
      player.WageWizard.Skills[skill] = {};
      salaryComponents = getSalaryComponents(skill, player[skill]);
      player.WageWizard.Skills[skill].min = salaryComponents[0] * player.WageWizard.rate * abroad_multiplier;
      player.WageWizard.Skills[skill].max = salaryComponents[1] * player.WageWizard.rate * abroad_multiplier;
    }
  };

  setPlayerData = function(player, overridePrimary) {
    var weekly;
    if (overridePrimary == null) {
      overridePrimary = null;
    }
    player.WageWizard = {};
    weekly = parseInt(player.Salary);
    player.WageWizard.rate = getRate(player.Age);
    player.WageWizard.discount = 1 - player.WageWizard.rate;
    player.WageWizard.weekly = weekly;
    player.WageWizard.seasonly = weekly * WEEKS;
    player.WageWizard.weeklyWithoutDiscount = weekly / player.WageWizard.rate;
    player.WageWizard.seasonlyWithoutDiscount = player.WageWizard.weeklyWithoutDiscount * WEEKS;
    player.WageWizard.abroadWeekly = player.Abroad ? weekly * 0.2 : 0;
    player.WageWizard.abroadSeasonly = player.Abroad ? player.WageWizard.abroadWeekly * WEEKS : 0;
    setPlayerSkills(player);
    setPrimarySkill(player);
    if (overridePrimary && player.WageWizard.unpredictable_skills.indexOf(overridePrimary) >= 0) {
      player.WageWizard.primary = overridePrimary;
    }
    applySecondaryDiscounts(player);
    setMinAndMaxSalary(player);
  };

  setData = function(team) {
    var abroad_total, player, weekly_total, weekly_without_discount_total, _i, _j, _len, _len1, _ref, _ref1, _results;
    weekly_total = 0;
    abroad_total = 0;
    weekly_without_discount_total = 0;
    _ref = team.PlayersData;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      player = _ref[_i];
      setPlayerData(player);
      weekly_total += player.WageWizard.weekly;
      abroad_total += player.WageWizard.abroadWeekly;
      weekly_without_discount_total += player.WageWizard.weeklyWithoutDiscount;
    }
    team.TeamData = {
      weekly: weekly_total,
      seasonly: weekly_total * 16,
      abroadWeekly: abroad_total,
      abroadSeasonly: abroad_total * 16,
      discount: 1 - weekly_total / weekly_without_discount_total
    };
    _ref1 = team.PlayersData;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      player = _ref1[_j];
      _results.push(player.WageWizard.teamPercent = player.WageWizard.weekly / weekly_total);
    }
    return _results;
  };

  WageWizard.Engine.start = function() {
    var team, _i, _len, _ref;
    _ref = WageWizard.Teams;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      team = _ref[_i];
      setData(team);
    }
    if (WageWizard.isChartsEnabled()) {
      /*
      plotDataTotal = []
      plotDataPartial = []
      plotDataTotal[0] = []
      plotDataPartial[0] = []
      plotDataPartial[1] = []
      plotIndex = 0
      for minute in [KICKOFF...FULLTIME] when minute isnt HALFTIME
        plotDataTotal[0][plotIndex] = [minute, totalContributionArray[minute]]
        plotDataPartial[0][plotIndex] = [minute, player1AVGArray[minute] * player1StrengthStaminaIndependent]
        plotDataPartial[1][plotIndex] = [minute, player2AVGArray[minute] * player2StrengthStaminaIndependent]
        ++plotIndex;
      @result.plotDataTotal = plotDataTotal
      @result.plotDataPartial = plotDataPartial
      */

    }
    this.result = 'OK';
    if (WageWizard.CONFIG.DEBUG) {
      console.log(this.result);
      $("#tabDebugNav").show();
    }
    return this.result;
  };

  WageWizard.Engine.setPlayerData = setPlayerData;

  WageWizard.Engine.getRate = getRate;

}).call(this);
